apply plugin: 'java'
apply plugin: 'application'

repositories {
  mavenLocal()
  // apache snapshots repo
  maven {
    url "https://repository.apache.org/content/repositories/snapshots"
  }
  jcenter()
  mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.streamlio.pulsar'
archivesBaseName = 'pulsar-java-tutorial'
version = '0.0.1'

ext {
  previewVersion = 16
  log4jVersion   = '2.8.2'
  pulsarVersion  = '2.2.0-SNAPSHOT'
  defaultClasspath = sourceSets.main.runtimeClasspath
}

dependencies {
  compile group: 'org.apache.pulsar', name: 'pulsar-client', version: pulsarVersion
  compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl',    version: log4jVersion
  compile group: 'org.apache.logging.log4j', name: 'log4j-core',          version: log4jVersion
}

jar {
  doFirst {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task("producerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.ProducerTutorial'
  classpath = defaultClasspath
}

task("consumerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.ConsumerTutorial'
  classpath = defaultClasspath
}

task("readerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.ReaderTutorial'
  classpath = defaultClasspath
}

task("asyncProducerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.async.AsyncProducerTutorial'
  classpath = defaultClasspath
}

task("asyncConsumerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.async.AsyncConsumerTutorial'
  classpath = defaultClasspath
}

task("kafkaConsumerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.kafka.KafkaAdaptorConsumer'
  args = ['tutorial-topic']
  classpath = defaultClasspath
}

task("kafkaProducerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.kafka.KafkaAdaptorProducer'
  args = ['tutorial-topic']
  classpath = defaultClasspath
}

task("producerStatsTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.stats.ProducerStatsTutorial'
  classpath = defaultClasspath
}

task("consumerStatsTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.stats.ConsumerStatsTutorial'
  classpath = defaultClasspath
}

task("messageQueueTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.usecases.MessageQueueTutorial'
  classpath = defaultClasspath
}

task("sharedSubscriptionTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.subscriptions.SharedSubscriptionTutorial'
  classpath = defaultClasspath
}

task("exclusiveSubscriptionTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.subscriptions.ExclusiveSubscriptionTutorial'
  classpath = defaultClasspath
}

task("failoverSubscriptionTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.subscriptions.FailoverSubscriptionTutorial'
  classpath = defaultClasspath
}

mainClassName = 'tutorial.ProducerTutorial'
